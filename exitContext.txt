上下文指的是 进程间占有的资源空间。

当一个进程时间片到了或者资缺的时候就会让出cpu 当另一个进程开始始用CPU之前,
系统要保存即将退出进程的执行状态,以便轮到时间片或有资源的时候现场恢复．
这就所谓的上下文切换．

安全上下文，调用上下文，同步上下文其实本质都一样．进程切换．

 

Csdn中对exitContext的解释是

如果在等待之前退出上下文的同步域（如果在同步上下文中），然后重新获取它，则为 true；否则为 false

如果对同步不太理解，这句话相当难以理解，而且翻译的有问题，汉语水平不到家。
“如果想要在等待之前先退出上下文的同步域（如果已经在同步上下文中），然后再重新获取它，就设置它为 true；否则为 false”，
我觉得应该是这个意思。

.net 使用Mutex 同步基元，它只向一个线程授予对共享资源的独占访问权。
如果一个线程获取了互斥体，则要获取该互斥体的第二个线程将被挂起，直到第一个线程释放该互斥体。

上面话的意思是， 如果你call mutex.WaitOne 之前已经在synchronized context里面（也就是说你已经拥有这个mutex),  
你再call mutex.WaitOne(1000,true) 的话，你的这个thread 会先退出context, 也就是放弃你目前拥有的mutex, 然后再排队等mutex。这是参数为true的情况，
false的话thread如果已经在synchronized context里面， 就直接使用拥有的这个mutex了。